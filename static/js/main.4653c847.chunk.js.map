{"version":3,"sources":["Table.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Table","covidData","className","Object","keys","timelineitems","reverse","filter","key","map","data","date","index","lastIndexOf","newDate","Date","slice","parseInt","getDate","getMonth","getFullYear","formatDate","new_daily_cases","new_daily_deaths","total_cases","total_recoveries","total_deaths","Header","getLastRowKey","find","class","countrytimelinedata","info","title","source","App","React","setCovidData","isLoading","setIsLoading","fetch","then","res","json","catch","error","console","log","style","display","alignItems","justifyContent","type","color","height","width","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDom","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4653c847.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nfunction Table({ covidData }) {\r\n\r\n  function formatDate(date) {\r\n    const index = date.lastIndexOf(\"/\") + 1;\r\n    const newDate = new Date(date.slice(0, index) +  (2000 + parseInt(date.slice(index), 10)));\r\n    const day = ('0' + newDate.getDate()).slice(-2);\r\n    const month = ('0' + (newDate.getMonth() + 1)).slice(-2);\r\n    return day + '-' + month + '-' + newDate.getFullYear();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"ui selectable celled table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>New daily cases</th>\r\n            <th>New daily deaths</th>\r\n            <th>Total cases</th>\r\n            <th>Total recoveries</th>\r\n            <th>Total deaths</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(covidData.timelineitems[0]).reverse().filter((key) => key !== \"stat\").map((key) => {\r\n              const data = covidData.timelineitems[0];\r\n              return (\r\n                <tr key={key}>\r\n                  <td>{formatDate(key)}</td>\r\n                  <td>{data[key].new_daily_cases}</td>\r\n                  <td>{data[key].new_daily_deaths}</td>\r\n                  <td>{data[key].total_cases}</td>\r\n                  <td>{data[key].total_recoveries}</td>\r\n                  <td>{data[key].total_deaths}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\nexport default Table;\r\n","import * as React from \"react\";\r\n\r\nfunction Header({covidData}) {\r\n    \r\n    function getLastRowKey() {\r\n        return Object.keys(covidData.timelineitems[0]).reverse().find((key) => key !== \"stat\");\r\n    }\r\n\r\n    function getTotalCases() {\r\n        const data = covidData.timelineitems[0];\r\n        return data[getLastRowKey()].total_cases;\r\n    }\r\n\r\n    function getTotalRecoveries() {\r\n        const data = covidData.timelineitems[0];\r\n        return data[getLastRowKey()].total_recoveries;\r\n    }\r\n\r\n    function getTotalDeaths() {\r\n        const data = covidData.timelineitems[0];\r\n        return data[getLastRowKey()].total_deaths;\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1 class=\"ui header\">\r\n                COVID-19 statistics for: {covidData.countrytimelinedata[0].info.title}\r\n                <div class=\"sub header\">Data source: {covidData.countrytimelinedata[0].info.source}</div>\r\n            </h1>\r\n            <div className=\"ui divider\"></div>\r\n            <div class=\"ui statistics\">\r\n                <div class=\"red statistic\">\r\n                    <div class=\"value\">\r\n                    {getTotalCases()}\r\n                    </div>\r\n                    <div class=\"label\">\r\n                    Total Cases\r\n                    </div>\r\n                </div>\r\n                <div class=\"green statistic\">\r\n                    <div class=\"value\">\r\n                    {getTotalRecoveries()}\r\n                    </div>\r\n                    <div class=\"label\">\r\n                    Total Recoveries\r\n                    </div>\r\n                </div>\r\n                <div class=\"black statistic\">\r\n                    <div class=\"value\">\r\n                    {getTotalDeaths()}\r\n                    </div>\r\n                    <div class=\"label\">\r\n                    Total Deaths\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import * as React from \"react\";\r\nimport Table from \"./Table\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner'\r\nimport Header from \"./Header\";\r\n\r\nfunction App() {\r\n  const [covidData, setCovidData] = React.useState({});\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    fetch(\"https://api.thevirustracker.com/free-api?countryTimeline=PL\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setCovidData(res);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(error => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}>\r\n        {\r\n          isLoading ? \r\n          <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} /> :  \r\n          <div>\r\n            <Header covidData={covidData} />\r\n            <div className=\"ui divider\"></div>\r\n            <Table covidData={covidData} />\r\n          </div>\r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDom.render(<App/>, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}