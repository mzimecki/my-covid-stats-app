{"version":3,"sources":["MapOfPoland.js","Header.js","Table.js","ChartTotal.js","ChartDaily.js","App.js","serviceWorker.js","index.js"],"names":["MapOfPoland","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","position","Map","center","zoom","TileLayer","attribution","url","Popup","Header","totalData","React","totalCovidData","setTotalCovidData","isLoading","setIsLoading","fetch","then","res","json","catch","error","console","log","className","style","height","countrydata","info","title","source","total_cases","total_recovered","total_deaths","total_new_cases_today","total_new_deaths_today","total_serious_cases","id","Table","covidData","Object","keys","timelineitems","reverse","filter","key","map","data","date","index","lastIndexOf","newDate","Date","slice","parseInt","getDate","getMonth","getFullYear","formatDate","new_daily_cases","new_daily_deaths","total_recoveries","ChartTotal","xType","width","x","y","parseFloat","color","items","strokeWidth","orientation","ChartDaily","App","setCovidData","isTimelineLoading","setIsTimelineLoading","top","left","transform","type","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDom","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.572803f1.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport L from 'leaflet';\r\nimport icon from 'leaflet/dist/images/marker-icon.png';\r\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\r\n\r\nfunction MapOfPoland() {\r\n    const DefaultIcon = L.icon({\r\n        iconUrl: icon,\r\n        shadowUrl: iconShadow\r\n    });\r\n    \r\n    L.Marker.prototype.options.icon = DefaultIcon;\r\n    const position = [52.54, 18.70]\r\n    return (\r\n        <Map center={position} zoom={6}>\r\n            <TileLayer\r\n                attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <Marker position={position}>\r\n                <Popup>\r\n                    Poland.\r\n                </Popup>\r\n            </Marker>\r\n        </Map>\r\n    )\r\n}\r\n\r\nexport default MapOfPoland;\r\n","import * as React from \"react\";\nimport MapOfPoland from \"./MapOfPoland\";\nimport 'leaflet/dist/leaflet.css';\n\nfunction Header({totalData}) {\n    \n    const [totalCovidData, setTotalCovidData] = React.useState({});\n    const [isLoading, setIsLoading] = React.useState(true);\n\n    React.useEffect(() => {\n        fetch(\"https://api.thevirustracker.com/free-api?countryTotal=PL\")\n            .then((res) => res.json())\n            .then((res) => {\n                setTotalCovidData(res);\n                setIsLoading(false);\n            })\n            .catch(error => console.log(error));\n    }, []);\n\n    return(\n        <div>\n            {\n                isLoading ?\n                <h1 className=\"ui block header\">\n                    <div className=\"ui segment\" style={{height: \"100px\"}}>\n                        <div className=\"ui active inverted dimmer\">\n                            <div className=\"ui text loader\">Loading</div>\n                        </div>\n                    </div>\n                </h1>\n                :\n                <div>\n                    <h1 className=\"ui block header\">\n                        COVID-19 statistics for: {totalCovidData.countrydata[0].info.title}\n                        <div className=\"sub header\">Data source: {totalCovidData.countrydata[0].info.source}</div>\n                    </h1>\n                    <div className=\"ui stackable two column grid\">\n                        <div className=\"column\">\n                            <div className=\"ui statistics\">\n                                <div className=\"red statistic\">\n                                    <div className=\"value\">\n                                    {totalCovidData.countrydata[0].total_cases}\n                                    </div>\n                                    <div className=\"label\">\n                                    Total Cases\n                                    </div>\n                                </div>\n                                <div className=\"green statistic\">\n                                    <div className=\"value\">\n                                    {totalCovidData.countrydata[0].total_recovered}\n                                    </div>\n                                    <div className=\"label\">\n                                    Total Recoveries\n                                    </div>\n                                </div>\n                                <div className=\"black statistic\">\n                                    <div className=\"value\">\n                                    {totalCovidData.countrydata[0].total_deaths}\n                                    </div>\n                                    <div className=\"label\">\n                                    Total Deaths\n                                    </div>\n                                </div>\n                                <div className=\"red statistic\">\n                                    <div className=\"value\">\n                                    {totalCovidData.countrydata[0].total_new_cases_today}\n                                    </div>\n                                    <div className=\"label\">\n                                    Total New Cases Today\n                                    </div>\n                                </div>\n                                <div className=\"black statistic\">\n                                    <div className=\"value\">\n                                    {totalCovidData.countrydata[0].total_new_deaths_today}\n                                    </div>\n                                    <div className=\"label\">\n                                    Total New Deaths Today\n                                    </div>\n                                </div>\n                                <div className=\"grey statistic\">\n                                    <div className=\"value\">\n                                    {totalCovidData.countrydata[0].total_serious_cases}\n                                    </div>\n                                    <div className=\"label\">\n                                    Serious Cases\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"column\">\n                            <div id=\"container\">\n                                <MapOfPoland/>\n                            </div>\n                        </div>\n                    </div>\n                    \n                </div>\n            }\n        </div>\n    )\n}\n\nexport default Header;","import * as React from \"react\";\r\n\r\nfunction Table({ covidData }) {\r\n\r\n  function formatDate(date) {\r\n    const index = date.lastIndexOf(\"/\") + 1;\r\n    const newDate = new Date(date.slice(0, index) +  (2000 + parseInt(date.slice(index), 10)));\r\n    const day = ('0' + newDate.getDate()).slice(-2);\r\n    const month = ('0' + (newDate.getMonth() + 1)).slice(-2);\r\n    return day + '-' + month + '-' + newDate.getFullYear();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <table className=\"ui selectable celled table\">\r\n        <thead>\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>New daily cases</th>\r\n            <th>New daily deaths</th>\r\n            <th>Total cases</th>\r\n            <th>Total recoveries</th>\r\n            <th>Total deaths</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(covidData.timelineitems[0]).reverse().filter((key) => key !== \"stat\").map((key) => {\r\n              const data = covidData.timelineitems[0];\r\n              return (\r\n                <tr key={key}>\r\n                  <td>{formatDate(key)}</td>\r\n                  <td>{data[key].new_daily_cases}</td>\r\n                  <td>{data[key].new_daily_deaths}</td>\r\n                  <td>{data[key].total_cases}</td>\r\n                  <td>{data[key].total_recoveries}</td>\r\n                  <td>{data[key].total_deaths}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\nexport default Table;\r\n","import * as React from \"react\";\nimport '../node_modules/react-vis/dist/style.css';\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    HorizontalGridLines,\n    VerticalGridLines,\n    LineSeries,\n    DiscreteColorLegend\n  } from 'react-vis';\n\nfunction ChartTotal({covidData}) {\n    \n    const legendItems = [\n        {\n          title: 'Total cases',\n          color: 'red',\n          strokeWidth: 6,\n        },\n        {\n            title: 'Total deaths',\n            color: 'black',\n            strokeWidth: 6,\n        }\n    ];\n\n    function getTotalCasesData() {\n        return Object.keys(covidData.timelineitems[0]).filter((key) => key !== \"stat\").map(key => {\n            const data = covidData.timelineitems[0];\n            return {x: new Date(key), y: parseFloat(data[key].total_cases/1000)};\n        });\n    }\n\n    function getTotalDeathsData() {\n        return Object.keys(covidData.timelineitems[0]).filter((key) => key !== \"stat\").map(key => {\n            const data = covidData.timelineitems[0];\n            return {x: new Date(key), y: parseFloat(data[key].total_deaths/1000)};\n        });\n    }\n    \n    return (\n        <XYPlot xType=\"time\" width={700} height={400}>\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <XAxis title=\"Time\" />\n            <YAxis title=\"Cases (thousands)\" />\n            <LineSeries data={getTotalCasesData()} color=\"red\" />\n            <LineSeries data={null} />\n            <LineSeries data={getTotalDeathsData()} color=\"black\"/>\n            <DiscreteColorLegend items={legendItems} orientation=\"horizontal\" />\n        </XYPlot>\n    );\n}\n\nexport default ChartTotal;","import * as React from \"react\";\nimport '../node_modules/react-vis/dist/style.css';\nimport {\n    XYPlot,\n    XAxis,\n    YAxis,\n    HorizontalGridLines,\n    VerticalGridLines,\n    LineSeries,\n    DiscreteColorLegend\n  } from 'react-vis';\n\nfunction ChartDaily({covidData}) {\n    \n    const legendItems = [\n        {\n          title: 'New daily cases',\n          color: 'red',\n          strokeWidth: 6,\n        },\n        {\n            title: 'New daily deaths',\n            color: 'black',\n            strokeWidth: 6,\n        }\n    ];\n\n    function getDailyCasesData() {\n        return Object.keys(covidData.timelineitems[0]).filter((key) => key !== \"stat\").map(key => {\n            const data = covidData.timelineitems[0];\n            return {x: new Date(key), y: parseFloat(data[key].new_daily_cases)};\n        });\n    }\n\n    function getDailyDeathsData() {\n        return Object.keys(covidData.timelineitems[0]).filter((key) => key !== \"stat\").map(key => {\n            const data = covidData.timelineitems[0];\n            return {x: new Date(key), y: parseFloat(data[key].new_daily_deaths)};\n        });\n    }\n    \n    return (\n        <XYPlot xType=\"time\" width={700} height={400}>\n            <HorizontalGridLines />\n            <VerticalGridLines />\n            <XAxis title=\"Time\" />\n            <YAxis title=\"Cases\" />\n            <LineSeries data={getDailyCasesData()} color=\"red\" />\n            <LineSeries data={null} />\n            <LineSeries data={getDailyDeathsData()} color=\"black\"/>\n            <DiscreteColorLegend items={legendItems} orientation=\"horizontal\" />\n        </XYPlot>\n    );\n}\n\nexport default ChartDaily;","import * as React from \"react\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\"\r\nimport Loader from 'react-loader-spinner'\r\nimport Header from \"./Header\";\r\nimport Table from \"./Table\";\r\nimport ChartTotal from \"./ChartTotal\";\r\nimport ChartDaily from \"./ChartDaily\";\r\n\r\nfunction App() {\r\n  const [covidData, setCovidData] = React.useState({});\r\n  const [isTimelineLoading, setIsTimelineLoading] = React.useState(true);\r\n \r\n  React.useEffect(() => {\r\n    fetch(\"https://api.thevirustracker.com/free-api?countryTimeline=PL\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setCovidData(res);\r\n        setIsTimelineLoading(false);\r\n      })\r\n      .catch(error => console.log(error));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n        {\r\n          isTimelineLoading ? \r\n          <div style={{position: \"fixed\", top: \"50%\", left: \"50%\", transform: \"translate(-50%, -50%)\"}}>\r\n            <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\r\n          </div>\r\n          :  \r\n          <div>\r\n            <Header />\r\n            <div className=\"ui divider\"></div>\r\n            <div className=\"ui stackable two column grid\">\r\n              <div className=\"column\">\r\n                <ChartTotal covidData={covidData} /><br/><br/><br/>\r\n                <div className=\"ui divider\"></div>\r\n                <ChartDaily covidData={covidData} />\r\n              </div>\r\n              <div className=\"column\"><Table covidData={covidData} /></div>\r\n            </div>\r\n          </div>\r\n        }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDom.render(<App/>, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}