{"version":3,"sources":["Table.js","App.js","serviceWorker.js","index.js"],"names":["Table","covidData","hasOwnProperty","countrytimelinedata","info","title","source","className","Object","keys","timelineitems","reverse","filter","key","map","data","new_daily_cases","new_daily_deaths","total_cases","total_recoveries","total_deaths","App","React","setCovidData","fetch","then","res","json","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDom","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0LA2CeA,MAzCf,YAA+B,IAAdC,EAAa,EAAbA,UACf,OAAkB,OAAdA,GAAsBA,EAAUC,eAAe,iBAE/C,2BACE,sDAC4BD,EAAUE,oBAAoB,GAAGC,KAAKC,OAElE,qCAAaJ,EAAUE,oBAAoB,GAAGC,KAAKE,QACnD,yBAAOC,UAAU,mBACf,6BACE,0BACE,kCACA,6CACA,8CACA,0CACA,8CACA,4CAGJ,6BACGC,OAAOC,KAAKR,EAAUS,cAAc,IAAIC,UAAUC,QAAO,SAACC,GAAD,MAAiB,SAARA,KAAgBC,KAAI,SAACD,GACpF,IAAME,EAAOd,EAAUS,cAAc,GACrC,OACE,sBAAIG,IAAKA,GACP,0BAAKA,GACL,0BAAKE,EAAKF,GAAKG,iBACf,0BAAKD,EAAKF,GAAKI,kBACf,0BAAKF,EAAKF,GAAKK,aACf,0BAAKH,EAAKF,GAAKM,kBACf,0BAAKJ,EAAKF,GAAKO,qBASxB,8C,MCpBIC,MAhBf,WAAgB,IAAD,EACqBC,WAAe,IADpC,mBACNrB,EADM,KACKsB,EADL,KASb,OANAD,aAAgB,WACdE,MAAM,+DACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACC,GAAD,OAASH,EAAaG,QAC7B,IAGD,2BACE,gBAAC,EAAD,CAAOzB,UAAWA,MCHlB2B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTV,MAAK,SAAAe,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDgBzC,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,sBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,sBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtCZ,MAAMW,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BrC,MAAK,SAAAsC,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM3C,MAAK,SAAAe,GACjCA,EAAa6B,aAAa5C,MAAK,WAC7BK,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM3C,MAAK,WACjCsB,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OC1C/BE,I","file":"static/js/main.a2ee26fa.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nfunction Table({ covidData }) {\r\n  if (covidData !== null && covidData.hasOwnProperty(\"timelineitems\")) {\r\n    return (\r\n      <div>\r\n        <h1>\r\n          COVID-19 statistics for: {covidData.countrytimelinedata[0].info.title}\r\n        </h1>\r\n        <h3>source: {covidData.countrytimelinedata[0].info.source}</h3>\r\n        <table className=\"ui celled table\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>New daily cases</th>\r\n              <th>New daily deaths</th>\r\n              <th>Totatl cases</th>\r\n              <th>Total recoveries</th>\r\n              <th>Total deaths</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(covidData.timelineitems[0]).reverse().filter((key) => key !== \"stat\").map((key) => {\r\n                const data = covidData.timelineitems[0];\r\n                return (\r\n                  <tr key={key}>\r\n                    <td>{key}</td>\r\n                    <td>{data[key].new_daily_cases}</td>\r\n                    <td>{data[key].new_daily_deaths}</td>\r\n                    <td>{data[key].total_cases}</td>\r\n                    <td>{data[key].total_recoveries}</td>\r\n                    <td>{data[key].total_deaths}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  } else {\r\n    return <h2>Loading data...</h2>;\r\n  }\r\n}\r\nexport default Table;\r\n","import * as React from \"react\";\r\nimport Table from \"./Table\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\n\r\nfunction App() {\r\n  const [covidData, setCovidData] = React.useState({});\r\n\r\n  React.useEffect(() => {\r\n    fetch(\"https://api.thevirustracker.com/free-api?countryTimeline=PL\")\r\n      .then((res) => res.json())\r\n      .then((res) => setCovidData(res));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Table covidData={covidData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDom.render(<App/>, document.getElementById('root'));\r\n\r\nserviceWorker.register();"],"sourceRoot":""}